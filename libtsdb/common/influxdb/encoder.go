package influxdb

import (
	pb "github.com/libtsdb/libtsdb-go/libtsdb/libtsdbpb"
	"strconv"
)

type Encoder struct {
	buf []byte
	// DefaultField is used when encoding single field series, which is the case for most TSDB but not InfluxDB
	// other tsdb (name, tags, value, ts)     : cpu.usage host=i7szx,dc=us-east 1.0 1359788400000
	// influxdb (name, tags, field=value, ts) : cpu.usage host=i7szx,dc=us-east v=1.0 1359788400000
	DefaultField string
}

func NewEncoder() *Encoder {
	return &Encoder{
		DefaultField: "v",
	}
}

// TODO: this should be generated by gommon ....
func (e *Encoder) Reset() {
	e.buf = e.buf[:0]
}

func (e *Encoder) Len() int {
	return len(e.buf)
}

func (e *Encoder) Cap() int {
	return cap(e.buf)
}

func (e *Encoder) Bytes() []byte {
	return e.buf
}

// temperature,machine=unit42,type=assembly internal=32,external=100 1434055562000000035
func (e *Encoder) WritePointIntTagged(p *pb.PointIntTagged) {
	e.buf = append(e.buf, p.Name...)
	e.buf = append(e.buf, ',')
	for _, tag := range p.Tags {
		e.buf = append(e.buf, tag.K...)
		e.buf = append(e.buf, '=')
		e.buf = append(e.buf, tag.V...)
		e.buf = append(e.buf, ',')
	}
	e.buf[len(e.buf)-1] = ' '
	e.buf = append(e.buf, e.DefaultField...)
	e.buf = append(e.buf, '=')
	e.buf = strconv.AppendInt(e.buf, p.Point.V, 10)
	e.buf = append(e.buf, ' ')
	e.buf = strconv.AppendInt(e.buf, p.Point.T, 10)
}
